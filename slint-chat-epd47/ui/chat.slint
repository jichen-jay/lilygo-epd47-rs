// Ultra-minimal Chat UI for E-Paper Display
// Using only the most basic Slint elements

// Simple message component
component MessageBubble inherits Rectangle {
    in property <{content: string, is-user: bool}> message;
    width: 100%;
    height: 60px;
    background: message.is-user ? #f0f0f0 : #e8e8e8;
    border-radius: 8px;
    
    // User indicator
    Rectangle {
        x: message.is-user ? parent.width - 50px : 10px;
        y: 5px;
        width: 30px;
        height: 30px;
        background: message.is-user ? #007acc : #ddd;
        border-radius: 15px;
        Text {
            text: message.is-user ? "U" : "AI";
            color: message.is-user ? white : #666;
            font-size: 12px;
            horizontal-alignment: center;
            vertical-alignment: center;
            x: 0px;
            y: 0px;
            width: 30px;
            height: 30px;
        }
    }
    
    // Message text
    Text {
        text: message.content;
        color: black;
        font-size: 14px;
        wrap: word-wrap;
        x: message.is-user ? 10px : 50px;
        y: 5px;
        width: parent.width - 70px;
        height: 50px;
        horizontal-alignment: left;
        vertical-alignment: top;
    }
}

// Simple button component
component SimpleButton inherits Rectangle {
    in property <string> text: "";
    callback clicked();
    width: 80px;
    height: 40px;
    background: button-area.pressed ? #0066aa : #007acc;
    border-radius: 4px;
    button-area := TouchArea {
        clicked => {
            root.clicked();
        }
    }

    Text {
        text: root.text;
        color: white;
        font-size: 14px;
        horizontal-alignment: center;
        vertical-alignment: center;
        x: 0px;
        y: 0px;
        width: root.width;
        height: root.height;
    }
}

// Simple input area
component InputArea inherits Rectangle {
    in property <string> placeholder: "";
    in-out property <string> text: "";
    callback send-clicked();
    callback clear-clicked();
    width: 100%;
    height: 50px;
    background: #f8f8f8;
    
    // Input display
    Rectangle {
        x: 10px;
        y: 5px;
        width: parent.width - 200px;
        height: 40px;
        background: white;
        border-width: 1px;
        border-color: #ccc;
        border-radius: 4px;
        Text {
            text: root.text != "" ? root.text : root.placeholder;
            color: root.text != "" ? black : #999;
            font-size: 14px;
            x: 8px;
            y: 0px;
            width: parent.width - 16px;
            height: parent.height;
            horizontal-alignment: left;
            vertical-alignment: center;
        }

        TouchArea {
            // Placeholder for text input - would need to be handled in Rust
        }
    }
    
    // Send button
    SimpleButton {
        text: "Send";
        x: parent.width - 180px;
        y: 5px;
        clicked => {
            root.send-clicked();
        }
    }
    
    // Clear button  
    SimpleButton {
        text: "Clear";
        x: parent.width - 90px;
        y: 5px;
        clicked => {
            root.clear-clicked();
        }
    }
}

export component ChatWindow inherits Window {
    width: 960px;
    height: 540px;
    title: "EPD47 Chat";
    background: white;

    in-out property <string> current-message: "";
    in-out property <[{content: string, is-user: bool}]> messages: [];
    in property <bool> is-loading: false;

    callback send-message(string);
    callback clear-chat();

    // Chat messages area
    Flickable {
        x: 10px;
        y: 10px;
        width: parent.width - 20px;
        height: parent.height - 100px;
        viewport-height: messages.length * 70px + (is-loading ? 60px : 0px);
        
        // Message list
        for message[index] in messages: MessageBubble {
            message: message;
            y: index * 70px;
            x: 0px;
            width: parent.width;
        }
        
        // Loading indicator
        if is-loading: Rectangle {
            y: messages.length * 70px;
            x: 0px;
            width: parent.width;
            height: 60px;
            background: #f8f8f8;
            border-radius: 8px;
            Text {
                text: "AI is thinking...";
                color: #666;
                font-size: 12px;
                x: 20px;
                y: 0px;
                width: parent.width - 40px;
                height: parent.height;
                horizontal-alignment: center;
                vertical-alignment: center;
            }
        }
    }

    // Input area at bottom
    InputArea {
        x: 10px;
        y: parent.height - 60px;
        width: parent.width - 20px;
        placeholder: "Type your message...";
        text: current-message;
        send-clicked => {
            if (current-message != "") {
                send-message(current-message);
                current-message = "";
            }
        }
        clear-clicked => {
            clear-chat();
        }
    }

    // Status bar
    Rectangle {
        x: 10px;
        y: parent.height - 90px;
        width: parent.width - 20px;
        height: 25px;
        background: #f0f0f0;
        border-radius: 3px;
        Text {
            text: "E-Paper Chat Ready";
            color: #666;
            font-size: 10px;
            x: 0px;
            y: 0px;
            width: parent.width;
            height: parent.height;
            horizontal-alignment: center;
            vertical-alignment: center;
        }
    }
}
